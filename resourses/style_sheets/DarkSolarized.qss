/**
** ______           _      _____       _            _             _ 
** |  _  \         | |    /  ___|     | |          (_)           | |
** | | | |__ _ _ __| | __ \ `--.  ___ | | __ _ _ __ _ _______  __| |
** | | | / _` | '__| |/ /  `--. \/ _ \| |/ _` | '__| |_  / _ \/ _` |
** | |/ / (_| | |  |   <  /\__/ / (_) | | (_| | |  | |/ /  __/ (_| |
** |___/ \__,_|_|  |_|\_\ \____/ \___/|_|\__,_|_|  |_/___\___|\__,_|
**                                                                  
**      Quassel Theme
** 
** Author: Chris Holland (Zren on Freenode/GitHub)
*/

/**
** Theme Notes:
**  - This theme is designed to work on top of the Fusion or the Plastique client style.
**    It will look weird on almost all the others (including the system default).
**    (Settings > Configure Quassel (F7) > Interface > Client Style)
*/

/**
** Helpful Links:
**  - QT:
**      http://qt-project.org/doc/qt-4.8/stylesheet-syntax.html
**      http://doc.qt.nokia.com/4.7-snapshot/stylesheet-reference.html
**      http://doc.qt.nokia.com/4.7-snapshot/stylesheet-examples.html
**  - Plastique Client Style:
**      https://qt.gitorious.org/qt/qt/source/src/gui/styles/qplastiquestyle.cpp
**      https://github.com/mirror/qt/blob/4.8/src/gui/styles/qplastiquestyle.cpp
**  - Quassel Stylesheet Gallery:
**      http://bugs.quassel-irc.org/projects/1/wiki/Stylesheet_Gallery
**      http://bugs.quassel-irc.org/projects/1/wiki/Stylesheet_Gallery#DarkMonokaiqss
*/
 
/**
**  - QSS Notes:
**      Quassel stylesheets also support Palette { role: color; } for setting the system
**      palette. See the QPalette docs for available roles, and convert them into qss-style
**      attributes, so ButtonText would become button-text or see qssparser.cpp In fact,
**      qssparser.cpp is the authorative source for Quassel's qss syntax that contains all
**      the extensions over standard Qt qss syntax.
**      See:
**          http://qt-project.org/doc/qt-4.8/qpalette.html#ColorRole-enum
**          https://github.com/quassel/quassel/blob/master/src/uisupport/qssparser.cpp
**  
*/

Palette {
    /* Window colors */
    window: #2b2b2b;
    background: #212121;
    foreground: #dddddd;

    base: #131313;
    alternate-base: #42403B;
    
    /* Just setting palette(tooltip-base) doesn't work as intended so we set it in
    ** a QTooltip{} rule as well.
    */
    tooltip-base: #131313; 
    tooltip-text: white; 
	
	/* The following attributes should be done in a scale */
    light: #444444; 
    midlight: #333333; 
    button: #292929; 
    mid: #252525; 
    dark: #202020; 
    shadow: #1d1d1d; 
    
    
    /* Text colors */
    text: white;
    button-text: #B6B3AB;
    
    highlight: #268bd2;
    
    /* Link colors */
    link: #539FA3;
    link-visited: #845B90;
    
    /* Color of the marker line in the chat view. BG Node that is overlayed on the first new ChatLine. */
    marker-line: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #586e75, stop: 0.1 #586e75, stop: 0.1 transparent);	
}

/*
** Base Object Colors
*/

/* Tables */

QTreeView, QTableView {
    alternate-background-color: rgba(0,0,0, 64);
    border: 0px;
}

QTreeView {
  selection-background-color: transparent;
}

QTreeView::item {
  border-left: 2px solid palette(base);
}

QTreeView::item:focus {
  border-width: 0 0 0 2px;
  outline: none;
}

QTreeView::item:selected {
  border-width: 0 0 0 2px;
  color: palette(button-text);
}

QTreeView::item:hover {
  background: palette(dark);
}


QTreeView::item:selected:active{
  color: palette(button-text);
  background: palette(dark);
  border-color: palette(highlight);
}

QTreeView::item:selected:!active {
  color: palette(button-text);
  background: palette(dark);
  border-color: palette(highlight);
}

/* Scrollbar */
/* From Quassel Wiki: http://sprunge.us/iZGB */
QScrollBar {
    background: palette(base);
    margin: 0;
}
QScrollBar:hover {
    /* Optional: Subtle accent of scrolling area on hover */
    background: #161616; /* base +2 */
}
QScrollBar:vertical {
    width: 8px;
}
QScrollBar:horizontal {
    height: 8px;
}

QScrollBar::handle {
    padding: 0;
    margin: 2px;
    border-radius: 2px;
    border: 2px solid palette(midlight);
    background: palette(midlight);
}

QScrollBar::handle:vertical {
    min-height: 20px;
    min-width: 0px;
}

QScrollBar::handle:horizontal {
    min-width: 20px;
    min-height: 0px;
}
QScrollBar::handle:hover {
    border-color: palette(light);
    background: palette(light);
}
QScrollBar::handle:pressed {
    background: palette(highlight);
    border-color: palette(highlight);
}

QScrollBar::add-line , QScrollBar::sub-line {
    height: 0px;
    border: 0px;
}
QScrollBar::up-arrow, QScrollBar::down-arrow {
    border: 0px;
    width: 0px;
    height: 0px;
}

QScrollBar::add-page, QScrollBar::sub-page {
    background: none;
}

/* Input Box */
MultiLineEdit {
}

/* Widgets */
/* http://doc.qt.nokia.com/4.7-snapshot/qdockwidget.html */
QMainWindow QAbstractScrollArea {
    border: 1px solid palette(shadow);
}

QMainWindow {
    background: palette(mid);
}

/* Splitter */
/* The splits between QDockWidgets and QMainWindow is a different element. */
QSplitter::handle, 
QMainWindow::separator {
	background: palette(dark);
}
QSplitter::handle:horizontal:hover, 
QMainWindow::separator:vertical:hover {
    background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, stop: 0 palette(window), stop: 0.5 palette(light), stop: 1 palette(window));
}

QSplitter::handle:vertical:hover, 
QMainWindow::separator:horizontal:hover {
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 palette(window), stop: 0.5 palette(light), stop: 1 palette(window));
}

/* Menu Bar / Context Menues */
QMenu {
    margin: 5px;
}

/* ToolTip */
/* Note: You cannot create transparent sections in the popup box without a mask set. Thus the black edges outside the rounded borders. */
QToolTip {
    border: 2px solid #202020; 
    border-radius: 2px;
    background: #131313; 
    color: white; 
}

/* Tabs */
/* 
    The palette is designed for the selected one to be darker. So we need to change it. Decided to do a simple line.
    tab:bottom and tab:top reverse y1 and y2 on the linear gradients.
    
    Tab Shadow: #444444 (light)
    Tab Hover: #666
    Tab Selected: palette(highlight)
*/
    

QTabWidget::tab-bar {
    alignment: center;
}

QTabBar::tab {
    min-width: 30px;
    height: 20px;
}

QTabBar::tab:bottom:selected {
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 palette(highlight), stop: 0.2 palette(highlight), stop: 0.2 transparent);
}

QTabBar::tab:top:selected {
    background: qlineargradient(x1: 0, y1: 1, x2: 0, y2: 0, stop: 0 palette(highlight), stop: 0.2 palette(highlight), stop: 0.2 transparent);
}

QTabBar::tab:!selected {
    color: #888;
}

QTabBar::tab:bottom:!selected {
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 palette(light), stop: 0.2 palette(light), stop: 0.2 transparent);
}

QTabBar::tab:top:!selected {
    background: qlineargradient(x1: 0, y1: 1, x2: 0, y2: 0, stop: 0 palette(light), stop: 0.2 palette(light), stop: 0.2 transparent);
}

QTabBar::tab:!selected:hover {
    color: #aaa;
}

QTabBar::tab:bottom:!selected:hover {
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #666, stop: 0.2 #666, stop: 0.2 transparent);
}

QTabBar::tab:top:!selected:hover {
    background: qlineargradient(x1: 0, y1: 1, x2: 0, y2: 0, stop: 0 #666, stop: 0.2 #666, stop: 0.2 transparent);
}

/*
** Quassel CSS
*/

/* Main Chat Background Override */
ChatView {
    background: #00212A;
}
ChatView QScrollBar {
    background: #00212A;
}
ChatView QScrollBar:hover {
    background: #00212A;
}

ChatView QScrollBar::handle {
    border-color: #073642;
    background: #073642;
}

ChatView QScrollBar::handle:hover {
    border-color: #073642;
    background: #073642;
}

/**/
QStatusBar {}
QStatusBar::item {
    border: none;
}
QStatusBar QLabel {
    color: #888;
}

/* https://github.com/quassel/quassel/blob/master/src/qtui/ui/msgprocessorstatuswidget.ui */
QStatusBar MsgProcessorStatusWidget {}
QStatusBar MsgProcessorStatusWidget QLabel#label {}
QStatusBar MsgProcessorStatusWidget QProgressBar#progressBar {}

/* https://github.com/quassel/quassel/blob/master/src/qtui/ui/coreconnectionstatuswidget.ui */
QStatusBar CoreConnectionStatusWidget {}
QStatusBar CoreConnectionStatusWidget QLabel#messageLabel {}
QStatusBar CoreConnectionStatusWidget QProgressBar#progressBar {}
QStatusBar CoreConnectionStatusWidget QLabel#lagLabel {}
QStatusBar CoreConnectionStatusWidget QLabel#sslLabel {
    qproperty-pixmap: none; /* Hide the SSL status icon */
}
    
QWidget {
    color: #dddddd;
}
